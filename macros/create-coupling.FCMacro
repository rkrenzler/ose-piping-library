# -*- coding: utf-8 -*-
# Author: Ruslan Krenzler.
# Date: 20 Januar December 2018
# Create a coupling fitting.
# Version 0.3

import math
import csv
import os.path

from PySide import QtCore, QtGui
import FreeCAD
import Spreadsheet
import Sketcher
import Part


tu = FreeCAD.Units.parseQuantity

# The value RELATIVE_EPSILON is used to slightly change the size of a subtracted part
# to prevent problems with boolean operations.
# This value does not change the appearance of part and can be large.
# If the original value is L then we often use the value L*(1+RELATIVE_EPSILON) instead.
# The relative deviation is then (L*(1+RELATIVE_EPSILON)-L)/L = RELATIVE_EPSILON.
# That is why the constant has "relative" in its name.
RELATIVE_EPSILON = 0.1


class Error(Exception):
    """Base class for exceptions in this module."""
    pass


class UnplausibleDimensions(Error):
    """Exception raised when dimensions are unplausible. For example if
	outer diameter is larger than the iner one.

    Attributes:
        message -- explanation of the error
    """

    def __init__(self, message):
        self.message = message


class Coupling:
	def __init__(self, document):
		self.document = document
		# Set default values.
		self.M1 = tu("5 in") # Outer diameter of socket 1
		self.POD1 = tu("4 in") # Pipe outer diameter at the socket 1
		self.PID1 = tu("3 in") # Pipe inner diameter at the socket 1
		self.L1 = tu("4 in") # Length of the socket1
		self.M2 = tu("3 in") # Outer diameter of socket 2
		self.POD2 = tu("2 in") # Pipe outer diameter at the socket 2
		self.PID2 = tu("1 in") # Pipe inner diameter at the socket 2
		self.L2 = tu("4 in") # Length of the socket2
		self.L3 = tu("1 in") # Lenght of the intemidate section of the coupling.

	@staticmethod
	def toSolid(document, part, name):
		"""Convert object to a solid.
			Basically those are commands, which FreeCAD runs when user converts a part to a solid.
		"""
		s = part.Shape.Faces
		s = Part.Solid(Part.Shell(s))
		o = document.addObject("Part::Feature", name)
		o.Label=name
		o.Shape=s
		return o
	@staticmethod
	def NestedObjects(group):
		res = []
		if group.OutList == []:
			res.append(group)
		else:
			# Append children first.
			for o in group.OutList:
				res += Coupling.NestedObjects(o)
			res.append(group)
		return res

	def checkDimensions(self):
		if not ( self.PID1 > tu("0 mm") and self.PID2 > tu("0 mm") ):
			raise UnplausibleDimensions("Inner pipe dimensions must be positive. They are %s and %s instead"%(self.PID1, self.PID2))
		if not ( self.M1 > self.POD1 and self.POD1 > self.PID1 ):
			raise UnplausibleDimensions("It must hold outer diameter %s > Outer pipe diameter %s > Inner pipe diameter %s"%(self.M1, self.POD1, self.PID1))
		if not ( self.M2 > self.POD2 and self.POD2 > self.PID2 ):
			raise UnplausibleDimensions("It must hold outer diameter %s > Outer pipe diameter %s > Inner pipe diameter %s"%(self.M2, self.POD2, self.PID2))
		if not ( self.L1 > 0):
			raise UnplausibleDimensions("Length L1=%s must be positive"%self.L1)
		if not ( self.L2 > 0):
			raise UnplausibleDimensions("Length L1=%s must be positive"%self.L1)
		if not ( self.L3 > 0):
			raise UnplausibleDimensions("Intermediate length L3=%s must be positive"%self.L3)
			
	def calculateShiftA2(self):
		# Determin thickness a2
		a2 = max(self.M1-self.POD1, self.M2-self.POD2) / 2
		x = (self.POD2-self.POD1)
		# The math.sqrt will return Float. That is why
		# we need to convert x in float too.
		factor = x.Value/math.sqrt(4*self.L3**2+x**2)
		a1 = factor*a2
		return a1
		
	def createOuterPart(self):
		""" Create a outer part which is cylinder+cone+cylinder."""
		# Create socket 1.
		cylinder1 = self.document.addObject("Part::Cylinder","Cylinder1")
		cylinder1.Radius = self.M1
		a1 = self.calculateShiftA2()
		cylinder1.Height = self.L1+a1
		# Create a cone and put it on the cylinder 1
		cone = self.document.addObject("Part::Cone","Cone")
		cone.Radius1 = self.M1
		cone.Radius2 = self.M2
		cone.Height = self.L3
		cone.Placement.Base = App.Vector(0,0,cylinder1.Height)
		# Create a socket 2 and put it on the cone 
		cylinder2 = self.document.addObject("Part::Cylinder","Cylinder2")
		cylinder2.Radius = self.M2
		cylinder2.Height = self.L2-a1
		cylinder2.Placement.Base = App.Vector(0,0,cylinder1.Height+cone.Height)
		# Combine all outer parts.
		outer = document.addObject("Part::MultiFuse","OuterParts")
		outer.Shapes = [cylinder1, cone, cylinder2]
		return outer
	def createInnerPart(self):
		""" Create a outer part which is cylinder+cone+cylinder."""
		#inner_cylinder1.Placement.Base = App.Vector(0,0, -inner_cylinder1.Height)
		# Create parts which must be removed from the cone.
		cylinder1i = self.document.addObject("Part::Cylinder","Cylinder1i")
		cylinder1i.Radius = self.POD1
		cylinder1i.Height = self.L1
		conei = self.document.addObject("Part::Cone","Cone")
		conei.Radius1 = self.PID1
		conei.Radius2 = self.PID2
		conei.Height = self.L3
		conei.Placement.Base = App.Vector(0,0,cylinder1i.Height)
		cylinder2i = self.document.addObject("Part::Cylinder","Cylinder2i")
		cylinder2i.Radius = self.POD2
		cylinder2i.Height = self.L2
		cylinder2i.Placement.Base = App.Vector(0,0,cylinder1i.Height+conei.Height)
		inner = document.addObject("Part::MultiFuse","InnerParts")
		inner.Shapes = [cylinder1i, conei, cylinder2i]
		return inner
		
	def create(self, convertToSolid):
		self.checkDimensions()
		outer = self.createOuterPart()
		inner = self.createInnerPart()
		coupling = self.document.addObject("Part::Cut","coupling")
		coupling.Base = outer
		coupling.Tool = inner

		if convertToSolid:
			# Before making a solid, recompute documents.
			self.document.recompute()
			# Now convert all parts to solid, and remove intermediate data.
			solid = self.toSolid(self.document, coupling, "coupling (solid)")
			# Remove previous (intermediate parts).
			parts = Coupling.NestedObjects(coupling)
			# Document.removeObjects can remove multple objects, when we use
			# parts directly. To prevent exceptions with deleted objects,
			# use the name list instead.
			names_to_remove = []
			for part in parts:
				if part.Name not in names_to_remove:
					names_to_remove.append(part.Name)
			for name in names_to_remove:
				print("Deleting temporary objects %s."%name)
				self.document.removeObject(name)
			return solid
		return coupling

document = App.activeDocument()
coupling = Coupling(document)
coupling.create(True)
document.recompute()
